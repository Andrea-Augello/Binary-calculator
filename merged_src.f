






: JF-HERE   HERE ;
: JF-CREATE   CREATE ;
: JF-FIND   FIND ;
: JF-WORD   WORD ;

: HERE   JF-HERE @ ;
: ALLOT   HERE + JF-HERE ! ;

: [']   ' LIT , ; IMMEDIATE
: '   JF-WORD JF-FIND >CFA ; 

: CELL+  4 + ;

: ALIGNED   3 + 3 INVERT AND ;
: ALIGN JF-HERE @ ALIGNED JF-HERE ! ;

: DOES>CUT   LATEST @ >CFA @ DUP JF-HERE @ > IF JF-HERE ! ; 

: CREATE   JF-WORD JF-CREATE DOCREATE , ;
: (DODOES-INT)  ALIGN JF-HERE @ LATEST @ >CFA ! DODOES> ['] LIT ,  LATEST @ >DFA , ; 
: (DODOES-COMP)  (DODOES-INT) ['] LIT , , ['] FIP! , ; 
: DOES>COMP   ['] LIT , HERE 3 CELLS + , ['] (DODOES-COMP) , ['] EXIT , ;
: DOES>INT   (DODOES-INT) LATEST @ HIDDEN ] ;
: DOES>   STATE @ 0= IF DOES>INT ELSE DOES>COMP THEN ; IMMEDIATE


HEX
FE000000 	CONSTANT PERI_BASE
1	 			CONSTANT OUTPUT
PERI_BASE 200000 + 	CONSTANT GPIO_BASE
GPIO_BASE 1C +     	CONSTANT GPSET0
GPIO_BASE 28 +     	CONSTANT GPCLR0
PERI_BASE 3000 +	 	CONSTANT TIMER_BASE
TIMER_BASE 4 +			CONSTANT TIMER_CNT

: ABS
	DUP NEGATE DUP 0 > IF NIP ELSE DROP THEN ;

: PIN ;
: MASK
	SWAP LSHIFT ;
: ON  1 MASK GPSET0 ! ;
: OFF 1 MASK GPCLR0 ! ;
: ENABLE
	>R 								
	A /MOD
	SWAP >R
	4 * GPIO_BASE + DUP @ 		
	R> 3 * DUP 						
	7 MASK INVERT ROT AND 		
	SWAP R> MASK OR 				
	SWAP ! ; 						

DECIMAL

: MILLISECONDS 1000 * ;
: SECONDS 1000000 * ;
: CURRENT_TIME
	TIMER_CNT @ ;
: DELAY
	CURRENT_TIME
	BEGIN
		DUP CURRENT_TIME
		- ABS
		>R OVER R>	<=
	UNTIL 
	DROP DROP ;


: GET
	CELLS + @ ;
8 CONSTANT WORD_SIZE 

VARIABLE CURRENT_VALUE
VARIABLE LAST_VALUE
VARIABLE STATUS
VARIABLE OPERATION

: ADDITION ['] + ;
: SUBTRACTION ['] - ;
: MULTIPLICATION ['] * ;
: DIVISION ['] / ;


: ?OVERFLOW [ 1 WORD_SIZE  1 - LSHIFT ] LITERAL > STATUS @ SWAP 
	IF 
		1 OR  
	ELSE
		[ 1 INVERT ] LITERAL AND
	THEN 
	STATUS ! ;
: ?NEGATIVE [ 1 31 LSHIFT ]  LITERAL AND 0 <> STATUS @ SWAP
	IF
		2 OR
	ELSE
		[ 2 INVERT ] LITERAL AND
	THEN
	STATUS ! ;

: TRUNCATE DUP ?OVERFLOW [ 1 WORD_SIZE LSHIFT ] LITERAL 1 - AND ;

: EXTEND_SIGN [ 1 WORD_SIZE 1 - LSHIFT ] LITERAL DUP ROT XOR SWAP - DUP ?NEGATIVE ;

: GET_RESULT ROT @ ROT @ ROT EXECUTE ;
: STORE_VALUE TRUNCATE EXTEND_SIGN CURRENT_VALUE ! ;


0 CURRENT_VALUE !
0 LAST_VALUE !
0 STATUS !
8 CONSTANT DISPLAY_SIZE
CREATE DISPLAY 21 , 20 , 16 , 12 , 7 , 8 , 25 , 24 ,
23 CONSTANT OVERFLOW
18 CONSTANT NEGATIVE

: LSB_MASK
	2 /MOD SWAP	ROT
	DISPLAY SWAP GET
	LSHIFT ;
	
: DISPLAY_MASK
	0 0 					
	BEGIN
		DUP 1 + >R
		ROT LSB_MASK
		ROT OR 			
		R> DUP
		DISPLAY_SIZE >=
	UNTIL
	DROP NIP ;			

: CLEAR
	[ 1 DISPLAY_SIZE LSHIFT 1 - DISPLAY_MASK ] LITERAL 	
	GPCLR0 ! 
	OVERFLOW OFF
	NEGATIVE OFF ;

: SHOW
	CLEAR 
	DISPLAY_MASK GPSET0 ! 
	DUP 1 AND OVERFLOW LSHIFT GPSET0 !
	2 AND NEGATIVE LSHIFT GPSET0 ! ;

: DISPLAY_SETUP 
	0
	BEGIN
		DUP 1 + >R
		DISPLAY SWAP GET
		OUTPUT ENABLE
		R> DUP
		DISPLAY_SIZE >=
	UNTIL
	DROP 
	OVERFLOW OUTPUT ENABLE
	NEGATIVE OUTPUT ENABLE
	CLEAR	
;

DISPLAY_SETUP
